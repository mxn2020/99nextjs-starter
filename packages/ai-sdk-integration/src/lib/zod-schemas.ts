
import { z } from 'zod';

export const aiPromptsSchema = z.object({
id: z.string().uuid().optional(),
account_id: z.string().uuid(),
user_id: z.string().uuid().optional(), // Who initiated the prompt, if applicable
prompt_text: z.string(),
created_at: z.string().datetime().optional(),
});

export const aiGeneratedContentsSchema = z.object({
id: z.string().uuid().optional(),
account_id: z.string().uuid(),
prompt_id: z.string().uuid().optional(), // Link to the prompt used
agent_message_id: z.string().uuid().optional(), // If generated by an agent message
content_type: z.enum(['text', 'image_url', 'json_object', 'audio_url']),
text_content: z.string().optional().nullable(),
json_content: z.record(z.any()).optional().nullable(), // Or use z.any() if structure varies wildly
asset_urls: z.array(z.string().url()).optional().nullable(), // For image URLs, audio URLs
model_used: z.string().optional().nullable(),
metadata: z.record(z.any()).optional().nullable(), // For any other metadata, e.g. image size
created_at: z.string().datetime().optional(),
// TODO: consider adding tokens_used, cost, etc. if readily available from Vercel AI SDK responses
});

export const aiAgentsSchema = z.object({
id: z.string().uuid().optional(),
account_id: z.string().uuid(),
name: z.string(),
description: z.string().optional().nullable(),
system_prompt: z.string().optional().nullable(),
config: z.record(z.any()).optional().nullable(), // Model, temperature, etc.
// TODO: Define how tools are associated with an agent (e.g., a list of tool names or more complex config)
// For now, tools might be passed at runtime.
created_at: z.string().datetime().optional(),
updated_at: z.string().datetime().optional(),
});

export const aiAgentSessionsSchema = z.object({
id: z.string().uuid().optional(),
account_id: z.string().uuid(),
agent_id: z.string().uuid(),
user_id: z.string().uuid().optional(), // User who started the session
metadata: z.record(z.any()).optional().nullable(),
created_at: z.string().datetime().optional(),
updated_at: z.string().datetime().optional(),
ended_at: z.string().datetime().optional().nullable(),
});

export const aiAgentMessagesSchema = z.object({
id: z.string().uuid().optional(),
session_id: z.string().uuid(),
account_id: z.string().uuid(), // Denormalized for RLS and easier querying
role: z.enum(['user', 'assistant', 'tool', 'system']), // As per Vercel AI SDK
content: z.string(),
name: z.string().optional().nullable(), // For tool name if role is 'tool'
tool_call_id: z.string().optional().nullable(),
tool_calls: z.array(z.object({ // For assistant messages requesting tool calls
id: z.string(),
type: z.literal('function'),
function: z.object({
name: z.string(),
arguments: z.string(), // JSON string of arguments
}),
})).optional().nullable(),
created_at: z.string().datetime().optional(),
});

export const aiUsageLogsSchema = z.object({
id: z.string().uuid().optional(),
account_id: z.string().uuid(),
user_id: z.string().uuid().optional(),
content_id: z.string().uuid().optional().nullable(), // Link to generated content if applicable
agent_session_id: z.string().uuid().optional().nullable(), // Link to agent session if applicable
model_id: z.string(),
action_type: z.enum(['text_generation', 'image_generation', 'object_generation', 'agent_run']),
prompt_tokens: z.number().int().optional().nullable(),
completion_tokens: z.number().int().optional().nullable(),
total_tokens: z.number().int().optional().nullable(),
// TODO: Cost tracking will require a more complex setup, potentially external to Vercel AI SDK directly.
// cost: z.number().optional().nullable(),
created_at: z.string().datetime().optional(),
});


-- Enable pg_uuidv7 if not already enabled (Supabase extension)
-- CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
-- For new UUID generation, pg_uuidv7 is preferred if available.
-- Otherwise, use uuid_generate_v4() from "uuid-ossp" or gen_random_uuid() for pg13+

-- AI Prompts Table
CREATE TABLE public.ai_prompts (
id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
account_id UUID NOT NULL REFERENCES public.accounts(id) ON DELETE CASCADE,
user_id UUID REFERENCES public.users(id) ON DELETE SET NULL, -- user who created the prompt, if tied to a specific user profile
prompt_text TEXT NOT NULL,
created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);
COMMENT ON TABLE public.ai_prompts IS 'Stores prompts used for AI generation.';
COMMENT ON COLUMN public.ai_prompts.account_id IS 'The account that owns this prompt.';

-- AI Generated Contents Table
CREATE TYPE ai_content_type AS ENUM ('text', 'image_url', 'json_object', 'audio_url');

CREATE TABLE public.ai_generated_contents (
id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
account_id UUID NOT NULL REFERENCES public.accounts(id) ON DELETE CASCADE,
prompt_id UUID REFERENCES public.ai_prompts(id) ON DELETE SET NULL,
agent_message_id UUID, -- Can be populated later, FK added after ai_agent_messages table
content_type ai_content_type NOT NULL,
text_content TEXT,
json_content JSONB,
asset_urls TEXT[], -- For storing multiple URLs (e.g., multiple images generated)
model_used VARCHAR(255),
metadata JSONB, -- Store things like image dimensions, generation parameters, etc.
created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);
COMMENT ON TABLE public.ai_generated_contents IS 'Stores content generated by AI models.';
COMMENT ON COLUMN public.ai_generated_contents.account_id IS 'The account that owns this content.';
COMMENT ON COLUMN public.ai_generated_contents.asset_urls IS 'Array of URLs for assets like images or audio files.';

-- AI Agents Table
CREATE TABLE public.ai_agents (
id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
account_id UUID NOT NULL REFERENCES public.accounts(id) ON DELETE CASCADE,
name VARCHAR(255) NOT NULL,
description TEXT,
system_prompt TEXT,
config JSONB, -- For storing model, temperature, tool configurations, etc.
created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);
COMMENT ON TABLE public.ai_agents IS 'Configuration for AI agents.';
COMMENT ON COLUMN public.ai_agents.account_id IS 'The account that owns this agent definition.';

-- AI Agent Sessions Table
CREATE TABLE public.ai_agent_sessions (
id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
account_id UUID NOT NULL REFERENCES public.accounts(id) ON DELETE CASCADE,
agent_id UUID NOT NULL REFERENCES public.ai_agents(id) ON DELETE CASCADE,
user_id UUID REFERENCES public.users(id) ON DELETE SET NULL, -- User who initiated the session
metadata JSONB,
created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
ended_at TIMESTAMPTZ
);
COMMENT ON TABLE public.ai_agent_sessions IS 'Tracks interaction sessions with AI agents.';
COMMENT ON COLUMN public.ai_agent_sessions.account_id IS 'The account associated with this session.';

-- AI Agent Messages Table
CREATE TYPE ai_message_role AS ENUM ('user', 'assistant', 'tool', 'system');

CREATE TABLE public.ai_agent_messages (
id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
session_id UUID NOT NULL REFERENCES public.ai_agent_sessions(id) ON DELETE CASCADE,
account_id UUID NOT NULL REFERENCES public.accounts(id) ON DELETE CASCADE, -- Denormalized for easier RLS and querying
role ai_message_role NOT NULL,
content TEXT NOT NULL,
name VARCHAR(255), -- For tool name, if role is 'tool'
tool_call_id VARCHAR(255), -- Identifier for the tool call this message is a result for, or is requesting
tool_calls JSONB, -- For assistant messages that include tool calls (Vercel AI SDK structure)
-- Example: [{"id": "call_xyz", "type": "function", "function": {"name": "get_weather", "arguments": "{\\"location\\": \\"Boston\\"}"}}]
created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);
COMMENT ON TABLE public.ai_agent_messages IS 'Stores messages exchanged during an agent session.';
COMMENT ON COLUMN public.ai_agent_messages.account_id IS 'The account associated with this message (denormalized).';
COMMENT ON COLUMN public.ai_agent_messages.tool_calls IS 'Structured data for assistant''s requested tool calls.';

-- Add FK constraint from ai_generated_contents to ai_agent_messages
ALTER TABLE public.ai_generated_contents
ADD CONSTRAINT fk_agent_message
FOREIGN KEY (agent_message_id)
REFERENCES public.ai_agent_messages(id)
ON DELETE SET NULL;
COMMENT ON COLUMN public.ai_generated_contents.agent_message_id IS 'Link to the agent message that produced this content, if applicable.';

-- AI Usage Logs Table
CREATE TYPE ai_action_type AS ENUM ('text_generation', 'image_generation', 'object_generation', 'agent_run', 'audio_generation');

CREATE TABLE public.ai_usage_logs (
id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
account_id UUID NOT NULL REFERENCES public.accounts(id) ON DELETE CASCADE,
user_id UUID REFERENCES public.users(id) ON DELETE SET NULL,
content_id UUID REFERENCES public.ai_generated_contents(id) ON DELETE SET NULL,
agent_session_id UUID REFERENCES public.ai_agent_sessions(id) ON DELETE SET NULL,
model_id VARCHAR(255) NOT NULL,
action_type ai_action_type NOT NULL,
prompt_tokens INT,
completion_tokens INT,
total_tokens INT,
-- cost DECIMAL(10, 6), -- TODO: Cost tracking is complex, requires price lists per model. Deferring.
created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);
COMMENT ON TABLE public.ai_usage_logs IS 'Logs AI model usage for an account.';

-- Indexes for common query patterns
CREATE INDEX idx_ai_prompts_account_id ON public.ai_prompts(account_id);
CREATE INDEX idx_ai_generated_contents_account_id ON public.ai_generated_contents(account_id);
CREATE INDEX idx_ai_generated_contents_content_type ON public.ai_generated_contents(content_type);
CREATE INDEX idx_ai_agents_account_id ON public.ai_agents(account_id);
CREATE INDEX idx_ai_agent_sessions_account_id ON public.ai_agent_sessions(account_id);
CREATE INDEX idx_ai_agent_sessions_agent_id ON public.ai_agent_sessions(agent_id);
CREATE INDEX idx_ai_agent_messages_session_id ON public.ai_agent_messages(session_id);
CREATE INDEX idx_ai_agent_messages_account_id ON public.ai_agent_messages(account_id); -- For RLS based queries
CREATE INDEX idx_ai_usage_logs_account_id ON public.ai_usage_logs(account_id);
CREATE INDEX idx_ai_usage_logs_action_type ON public.ai_usage_logs(action_type);

-- Trigger function to update 'updated_at' columns
CREATE OR REPLACE FUNCTION public.set_current_timestamp_updated_at()
RETURNS TRIGGER AS $$
BEGIN
NEW.updated_at = now();
RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER set_ai_agents_updated_at
BEFORE UPDATE ON public.ai_agents
FOR EACH ROW
EXECUTE FUNCTION public.set_current_timestamp_updated_at();

CREATE TRIGGER set_ai_agent_sessions_updated_at
BEFORE UPDATE ON public.ai_agent_sessions
FOR EACH ROW
EXECUTE FUNCTION public.set_current_timestamp_updated_at();
